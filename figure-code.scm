#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.4 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 55 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 10 #"Monospace\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1           0 1070 0 17 3 79
(
 #";;;; This file is project 0 for CS 314 for Fall 2019, taught by Prof"
 #". Francisco"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 84
(
 #";;;; The assignment is to fill in the definitions below, adding your"
 #" code where ever"
) 0 0 24 29 1 #"\n"
0 0 17 3 25 #";;;; you see the comment "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 21 #";;  replace this line"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";;;; to make each function do what its comments say it should do.  Y"
 #"ou"
) 0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #";;;; may replace such a line with as many lines as you want to.  You"
 #" may"
) 0 0 24 29 1 #"\n"
0 0 17 3 64
#";;;; also add your own functions, as long as each function has a"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";;;; comment like the ones below.  You may not make any other change"
 #"s"
) 0 0 24 29 1 #"\n"
0 0 17 3 18 #";;;; to this code."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #";;;; see end of file for some examples that will run ONCE THE FUNCTI"
 #"ON add-check"
) 0 0 24 29 1 #"\n"
0 0 17 3 17 #";;;; IS FILLED IN"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";;;; See the assignment on Sakai for more examples (these may requir"
 #"e"
) 0 0 24 29 1 #"\n"
0 0 17 3 66
#";;;; more than add-check to be filled in) and further information,"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";;;; including due date."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 68
#";;;; code for a program to create closures that generate figures out"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";;;; of characters."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 67
#";;; figures: a figure is represented by a list of 3 elements: func,"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;; numrows, and numcols where:"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";;;   func is a function (ie a closure) of two parameters: row, colu"
 #"mn"
) 0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";;;     that returns the character at the given row and column of th"
 #"e"
) 0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";;;     figure.  If row is out of bounds ie row<0 or row>=numrows, o"
 #"r"
) 0 0 24 29 1 #"\n"
0 0 17 3 67
#";;;     similarly for col, func returns the character #\\. (a period"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";;;     character)"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";;;   numrows is the number of rows in the figure"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";;;   numcols is the number of columns in the figure"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #";;; The following are functions to create and access a figure. Note "
 #"that"
) 0 0 24 29 1 #"\n"
0 0 17 3 44 #";;; make-figure adds bounds checking to func"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-figure"
0 0 24 3 1 #" "
0 0 14 3 4 #"func"
0 0 24 3 1 #" "
0 0 14 3 7 #"numrows"
0 0 24 3 1 #" "
0 0 14 3 7 #"numcols"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"add-check"
0 0 24 3 1 #" "
0 0 14 3 4 #"func"
0 0 24 3 1 #" "
0 0 14 3 7 #"numrows"
0 0 24 3 1 #" "
0 0 14 3 7 #"numcols"
0 0 24 3 2 #") "
0 0 14 3 7 #"numrows"
0 0 24 3 1 #" "
0 0 14 3 7 #"numcols"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"figure-func"
0 0 24 3 1 #" "
0 0 14 3 6 #"figure"
0 0 24 3 3 #") ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 6 #"figure"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"figure-numrows"
0 0 24 3 1 #" "
0 0 14 3 6 #"figure"
0 0 24 3 2 #")("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 6 #"figure"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"figure-numcols"
0 0 24 3 1 #" "
0 0 14 3 6 #"figure"
0 0 24 3 2 #")("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 6 #"figure"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 77
(
 #";;; forn takes three arguments:  start and stop, which are numbers, "
 #"and func "
) 0 0 24 29 1 #"\n"
0 0 17 3 40 #";;; which is a function of one argument."
0 0 24 29 1 #"\n"
0 0 17 3 83
(
 #";;; forn calls func several times, first with the argument start, th"
 #"en with start+1"
) 0 0 24 29 1 #"\n"
0 0 17 3 79
(
 #";;; then ... finally with stop.  It returns a list of the values of "
 #"the calls. "
) 0 0 24 29 1 #"\n"
0 0 17 3 86
(
 #";;; If start>stop, forn simply returns the empty list without doing "
 #"any calls to func."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"forn"
0 0 24 3 1 #" "
0 0 14 3 5 #"start"
0 0 24 3 1 #" "
0 0 14 3 4 #"stop"
0 0 24 3 1 #" "
0 0 14 3 4 #"func"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 5 #"start"
0 0 24 3 1 #" "
0 0 14 3 4 #"stop"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 2 #"()"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 11 #"first-value"
0 0 24 3 2 #" ("
0 0 14 3 4 #"func"
0 0 24 3 1 #" "
0 0 14 3 5 #"start"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 11 #"first-value"
0 0 24 3 2 #" ("
0 0 14 3 4 #"forn"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 5 #"start"
0 0 24 3 2 #") "
0 0 14 3 4 #"stop"
0 0 24 3 1 #" "
0 0 14 3 4 #"func"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 17 3 75
(
 #";;; range-check takes 4 arguments:  row, numrows, col, numcols It ch"
 #"ecks if"
) 0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #";;;  0 <= row < numrows and similarly for col and numcols.  If both "
 #"row and col are in "
) 0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #";;;  range, range-check returns #t.  If either are out of range, ran"
 #"gecheck  returns #f"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"range-check"
0 0 24 3 1 #" "
0 0 14 3 3 #"row"
0 0 24 3 1 #" "
0 0 14 3 7 #"numrows"
0 0 24 3 1 #" "
0 0 14 3 3 #"col"
0 0 24 3 1 #" "
0 0 14 3 7 #"numcols"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 3 #"row"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 3 #"col"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 2 #">="
0 0 24 3 1 #" "
0 0 14 3 3 #"row"
0 0 24 3 1 #" "
0 0 14 3 7 #"numrows"
0 0 24 3 3 #") ("
0 0 14 3 2 #">="
0 0 24 3 1 #" "
0 0 14 3 3 #"col"
0 0 24 3 1 #" "
0 0 14 3 7 #"numcols"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 66
#";;What add check does is wraps a bounds check around a figure call"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";;normally a figure is (func rows cols)"
0 0 24 29 1 #"\n"
0 0 17 3 57 #";;hand back a lambda that is invoked on 2 chars rows cols"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";;lambda should range-check row & cols that is given"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";;if rangecheck says its good apply func to 2 params we have"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";;if not return #\\."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 104
(
 #";\"this might be useful, if you see in this case I let a lambda hint"
 #" hint\"  look at lexical binding slide"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";;everything besides add-check should return a figure"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";;; add-check takes 3 arguments: func, numrows and numcols.  func is"
 #" a"
) 0 0 24 29 1 #"\n"
0 0 17 3 66
#";;; function of two numbers, row and col.  add-check returns a new"
0 0 24 29 1 #"\n"
0 0 17 3 75
(
 #";;; function, which we will refer to here as func2.  Like func, func"
 #"2 takes"
) 0 0 24 29 1 #"\n"
0 0 17 3 68
#";;; a row number and a column number as arguments. func2 first calls"
0 0 24 29 1 #"\n"
0 0 17 3 68
#";;; range-check to do a range check on these numbers against numrows"
0 0 24 29 1 #"\n"
0 0 17 3 65
#";;; and numcols. If row or col is out of range func2 returns #\\.,"
0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #";;; otherwise it returns the result of (func row col).  You can thin"
 #"k of"
) 0 0 24 29 1 #"\n"
0 0 17 3 68
(
 #";;; func2 as a \"safe\" version of func, like the function returned "
 #"by"
) 0 0 24 29 1 #"\n"
0 0 17 3 65
#";;; null-safe in Resources > Scheme > null-safe.scm except that a"
0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #";;; \"bad\", i.e. out of range, argument to func here will not neces"
 #"sarily"
) 0 0 24 29 1 #"\n"
0 0 17 3 42 #";;; crash scheme the way (car '( )) would."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 66
#";;What add check does is wraps a bounds check around a figure call"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";;normally a figure is (func rows cols)"
0 0 24 29 1 #"\n"
0 0 17 3 57 #";;hand back a lambda that is invoked on 2 chars rows cols"
0 0 24 29 1 #"\n"
0 0 17 3 99
(
 #";;lambda should range-check row & cols that is given for every row a"
 #"nd column value in the window~!"
) 0 0 24 29 1 #"\n"
0 0 17 3 60
#";;if rangecheck says its good apply func to 2 params we have"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";;if not return #\\."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"add-check"
0 0 24 3 1 #" "
0 0 14 3 4 #"func"
0 0 24 3 1 #" "
0 0 14 3 7 #"numrows"
0 0 24 3 1 #" "
0 0 14 3 7 #"numcols"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"row"
0 0 24 3 1 #" "
0 0 14 3 3 #"col"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 2 #" ("
0 0 14 3 11 #"range-check"
0 0 24 3 1 #" "
0 0 14 3 3 #"row"
0 0 24 3 1 #" "
0 0 14 3 7 #"numrows"
0 0 24 3 1 #" "
0 0 14 3 3 #"col"
0 0 24 3 1 #" "
0 0 14 3 7 #"numcols"
0 0 24 3 2 #"))"
0 0 17 3 130
(
 #";;rangecheck will either be #t if its in the figure or #f if not. if"
 #" it is return whats at that spot in the figure if not return ."
) 0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"func"
0 0 24 3 1 #" "
0 0 14 3 3 #"row"
0 0 24 3 1 #" "
0 0 14 3 3 #"col"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 21 3 3 #"#\\."
0 0 17 3 6 #";;else"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 17 3 93
(
 #";;; display-window prints out the characters that make up a rectangu"
 #"lar segment of the figure"
) 0 0 24 29 1 #"\n"
0 0 17 3 98
(
 #";;;    startrow and endrow are the first and last rows to print, sim"
 #"ilarly for startcol and endcol"
) 0 0 24 29 1 #"\n"
0 0 17 3 99
(
 #";;; The last thing display-window does is to call (newline) to print"
 #" a blank line under the figure."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"display-window"
0 0 24 3 1 #" "
0 0 14 3 9 #"start-row"
0 0 24 3 1 #" "
0 0 14 3 8 #"stop-row"
0 0 24 3 1 #" "
0 0 14 3 9 #"start-col"
0 0 24 3 1 #" "
0 0 14 3 8 #"stop-col"
0 0 24 3 1 #" "
0 0 14 3 6 #"figure"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"forn"
0 0 24 3 1 #" "
0 0 14 3 9 #"start-row"
0 0 24 3 1 #" "
0 0 14 3 8 #"stop-row"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"r"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 4 #"forn"
0 0 24 3 1 #" "
0 0 14 3 9 #"start-col"
0 0 24 3 1 #" "
0 0 14 3 8 #"stop-col"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"c"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 7 #"display"
0 0 24 3 3 #" (("
0 0 14 3 11 #"figure-func"
0 0 24 3 1 #" "
0 0 14 3 6 #"figure"
0 0 24 3 2 #") "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 7 #"newline"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"newline"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 109
(
 #";;; charfig take one argument, a character, and returns a 1-row, 1-c"
 #"olumn figure consisting of that character"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"charfig"
0 0 24 3 1 #" "
0 0 14 3 4 #"char"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"make-figure"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"row"
0 0 24 3 1 #" "
0 0 14 3 3 #"col"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 2 #"  "
0 0 14 3 4 #"char"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";;; sw-corner returns a figure that is a size x size square, in whic"
 #"h"
) 0 0 24 29 1 #"\n"
0 0 17 3 68
#";;; the top-left to bottom-right diagonal and everything under it is"
0 0 24 29 1 #"\n"
0 0 17 3 65
#";;; the chracter * and everything above the diagonal is the space"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;; character"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"sw-corner"
0 0 24 3 1 #" "
0 0 14 3 4 #"size"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"make-figure"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"row"
0 0 24 3 1 #" "
0 0 14 3 3 #"col"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 2 #">="
0 0 24 3 1 #" "
0 0 14 3 3 #"row"
0 0 24 3 1 #" "
0 0 14 3 3 #"col"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                      "
0 0 21 3 3 #"#\\*"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                      "
0 0 21 3 7 #"#\\space"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 14 3 4 #"size"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 14 3 4 #"size"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 24 29 1 #"\n"
0 0 17 3 61
#";;; repeat-cols returns a figure made up of nrepeat copies of"
0 0 24 29 1 #"\n"
0 0 17 3 64
#";;; figure, appended horizontally (left and right of each other)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"repeat-cols"
0 0 24 3 1 #" "
0 0 14 3 7 #"nrepeat"
0 0 24 3 1 #" "
0 0 14 3 6 #"figure"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"make-figure"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"row"
0 0 24 3 1 #" "
0 0 14 3 3 #"col"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 4 #"  (("
0 0 14 3 11 #"figure-func"
0 0 24 3 1 #" "
0 0 14 3 6 #"figure"
0 0 24 3 2 #") "
0 0 14 3 3 #"row"
0 0 24 3 2 #" ("
0 0 14 3 6 #"modulo"
0 0 24 3 1 #" "
0 0 14 3 3 #"col"
0 0 24 3 2 #" ("
0 0 14 3 14 #"figure-numcols"
0 0 24 3 1 #" "
0 0 14 3 6 #"figure"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                )"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 14 #"figure-numrows"
0 0 24 3 1 #" "
0 0 14 3 6 #"figure"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 7 #"nrepeat"
0 0 24 3 2 #" ("
0 0 14 3 14 #"figure-numcols"
0 0 24 3 1 #" "
0 0 14 3 6 #"figure"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 17 3 71
(
 #";; the function just calls the function that repeat-cols received, b"
 #"ut "
) 0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 17 3 44 #";; uses modulo to select the right position."
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   )"
0 0 24 29 1 #"\n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";;; repeat-rows returns a figure made up of nrepeat copies"
0 0 24 29 1 #"\n"
0 0 17 3 65
#";;; of a figure, appended vertically (above and below each other)"
0 0 24 29 1 #"\n"
0 0 17 3 96
(
 #";;!!!It moves through like its a graph or matrix starting at 0,0 dow"
 #"n and to the right to n,n!!!"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 124
(
 #";;Same process as repeat-cols use lambda to move through the row and"
 #" column positions and reprint the figure using modulo to"
) 0 0 24 29 1 #"\n"
0 0 17 3 118
(
 #";;repeatedly get characters in the 1 through max rows position on th"
 #"e figure to be on the new figure in repeated order"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"repeat-rows"
0 0 24 3 1 #" "
0 0 14 3 7 #"nrepeat"
0 0 24 3 1 #" "
0 0 14 3 6 #"figure"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"make-figure"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"row"
0 0 24 3 1 #" "
0 0 14 3 3 #"col"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                 (("
0 0 14 3 11 #"figure-func"
0 0 24 3 1 #" "
0 0 14 3 6 #"figure"
0 0 24 3 3 #") ("
0 0 14 3 6 #"modulo"
0 0 24 3 1 #" "
0 0 14 3 3 #"row"
0 0 24 3 2 #" ("
0 0 14 3 14 #"figure-numrows"
0 0 24 3 1 #" "
0 0 14 3 6 #"figure"
0 0 24 3 3 #")) "
0 0 14 3 3 #"col"
0 0 24 3 1 #")"
0 0 17 3 68
#";;put character at figre address of curentRow%maxrow into new figure"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               )"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 7 #"nrepeat"
0 0 24 3 2 #" ("
0 0 14 3 14 #"figure-numrows"
0 0 24 3 1 #" "
0 0 14 3 6 #"figure"
0 0 24 3 3 #")) "
0 0 17 3 27 #";;repeat to print n figures"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 14 #"figure-numcols"
0 0 24 3 1 #" "
0 0 14 3 6 #"figure"
0 0 24 3 2 #") "
0 0 17 3 13 #";;col is same"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 67
#";;; append cols returns the figure made by appending figureb to the"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";;; right of figurea the number of rows in the resulting figure is t"
 #"he"
) 0 0 24 29 1 #"\n"
0 0 17 3 56 #";;; smaller of the number of rows in figurea and figureb"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 114
(
 #";;Similarly to repeat rows but we use (col - maxCol) so we can get t"
 #"he columns we need after moving through all of"
) 0 0 24 29 1 #"\n"
0 0 17 3 91
(
 #";;figureA in order to print the values in figureB starting at the co"
 #"l 0 position of figureb"
) 0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"append-cols"
0 0 24 3 1 #" "
0 0 14 3 7 #"figurea"
0 0 24 3 1 #" "
0 0 14 3 7 #"figureb"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"make-figure"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"row"
0 0 24 3 1 #" "
0 0 14 3 3 #"col"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 2 #"if"
0 0 24 3 1 #"("
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 3 #"col"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 7 #"figurea"
0 0 24 3 2 #"))"
0 0 17 3 44 #";; if we have not exceeded maxcol of figureA"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                      (("
0 0 14 3 11 #"figure-func"
0 0 24 3 1 #" "
0 0 14 3 7 #"figurea"
0 0 24 3 2 #") "
0 0 14 3 3 #"row"
0 0 24 3 1 #" "
0 0 14 3 3 #"col"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                      (("
0 0 14 3 11 #"figure-func"
0 0 24 3 1 #" "
0 0 14 3 7 #"figureb"
0 0 24 3 2 #") "
0 0 14 3 3 #"row"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 3 #"col"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 7 #"figurea"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  )"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                )"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 2 #"if"
0 0 24 3 1 #"("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 7 #"figurea"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 7 #"figureb"
0 0 24 3 2 #"))"
0 0 17 3 55 #";;use whichever row is smaller for maxRow of new figure"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 7 #"figurea"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 7 #"figureb"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                )"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 7 #"figurea"
0 0 24 3 3 #") ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 7 #"figureb"
0 0 24 3 2 #"))"
0 0 17 3 53 #";;col of new figure will be col of both figures added"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #";;; append-rows returns the figure made by appending figureb below f"
 #"igurea"
) 0 0 24 29 1 #"\n"
0 0 17 3 100
(
 #";;; the number of columns in the resulting figure is the smaller of "
 #"the number of columns in figurea"
) 0 0 24 29 1 #"\n"
0 0 17 3 16 #";;; and figternb"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 134
(
 #";;Same as append-cols except now we check which col value is smalelr"
 #" and when we exceed figurea max rows and start printing figb stuff"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"append-rows"
0 0 24 3 1 #" "
0 0 14 3 7 #"figurea"
0 0 24 3 1 #" "
0 0 14 3 7 #"figureb"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"make-figure"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"row"
0 0 24 3 1 #" "
0 0 14 3 3 #"col"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 2 #"if"
0 0 24 3 1 #"("
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 3 #"row"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 7 #"figurea"
0 0 24 3 2 #"))"
0 0 17 3 43 #";;if we have not exceeded maxrow of figureA"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                      (("
0 0 14 3 11 #"figure-func"
0 0 24 3 1 #" "
0 0 14 3 7 #"figurea"
0 0 24 3 2 #") "
0 0 14 3 3 #"row"
0 0 24 3 1 #" "
0 0 14 3 3 #"col"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                      (("
0 0 14 3 11 #"figure-func"
0 0 24 3 1 #" "
0 0 14 3 7 #"figureb"
0 0 24 3 3 #") ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 3 #"row"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 7 #"figurea"
0 0 24 3 3 #")) "
0 0 14 3 3 #"col"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  )"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                )"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 7 #"figurea"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 7 #"figureb"
0 0 24 3 2 #"))"
0 0 17 3 52 #";;maxRow is equal to figurea maxRow + figureb maxRow"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 2 #"if"
0 0 24 3 1 #"("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 7 #"figurea"
0 0 24 3 3 #") ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 7 #"figureb"
0 0 24 3 2 #"))"
0 0 17 3 38 #";;this time check which col is smaller"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 7 #"figurea"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 7 #"figureb"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";;; flip-cols returns a figure that is the left-right mirror image o"
 #"f figure"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 132
(
 #";;goal: use the formula ((currentRow, currentColumn) = (currentRow, "
 #"(maxCol - (currentCol + 1(add 1 to make up for begining at 0))))"
) 0 0 24 29 1 #"\n"
0 0 17 3 106
(
 #";;to access the characters of the figure directly and mirror their p"
 #"osition on the row, rows stay the same"
) 0 0 24 29 1 #"\n"
0 0 17 3 98
(
 #";;but the characters at the columns are opposite, maxRows and maxCol"
 #"s of the figure stays the same"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"flip-cols"
0 0 24 3 1 #" "
0 0 14 3 6 #"figure"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 11 #"make-figure"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"row"
0 0 24 3 1 #" "
0 0 14 3 3 #"col"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                  (("
0 0 14 3 11 #"figure-func"
0 0 24 3 1 #" "
0 0 14 3 6 #"figure"
0 0 24 3 2 #") "
0 0 14 3 3 #"row"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 6 #"figure"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 3 #"col"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 17 3 45 #";;(currR, currC) = (currR, (maxC - (currC+1))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                )"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 6 #"figure"
0 0 24 3 1 #")"
0 0 17 3 18 #";;same as prev fig"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 6 #"figure"
0 0 24 3 1 #")"
0 0 17 3 19 #";; same as prev fig"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";;; flip-rows returns a figure that is the up-down mirror image of f"
 #"igure"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 129
(
 #";; Same process as flip cols but now the forumla is used to access t"
 #"he charcters in each column but mirrors which row they are in"
) 0 0 24 29 1 #"\n"
0 0 17 3 51 #";;Eq:  (currR, currC) = ((maxR - (currR+1)), currC)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"flip-rows"
0 0 24 3 1 #" "
0 0 14 3 6 #"figure"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 11 #"make-figure"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"row"
0 0 24 3 1 #" "
0 0 14 3 3 #"col"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                  (("
0 0 14 3 11 #"figure-func"
0 0 24 3 1 #" "
0 0 14 3 6 #"figure"
0 0 24 3 3 #") ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 6 #"figure"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 3 #"row"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")) "
0 0 14 3 3 #"col"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                )"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 6 #"figure"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 6 #"figure"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   )"
0 0 24 29 1 #"\n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";;;; some examples thst should work after just add-check is filled i"
 #"n"
) 0 0 24 29 1 #"\n"
0 0 17 3 62
#";;;; above.  (Remove the ;'s at the start of the lines below.)"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";(define fig1 (sw-corner 4))"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";(display-window 0 3 0 3 fig1)"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";(define fig2 (repeat-cols 3 fig1))"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";(display-window 0 4 0 12 fig2)"
0 0 24 29 1 #"\n"
0           0
